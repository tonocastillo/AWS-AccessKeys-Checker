---
AWSTemplateFormatVersion: '2010-09-09'
Description: "Template to create Access Keys Rotation Lambda"
Resources:
  AccessKeysRotationRole:
    Type: AWS::IAM::Role
    Properties:
        RoleName: "AccessKeysRotationRole"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - events.amazonaws.com
            Action: sts:AssumeRole
        Policies:
          -
            PolicyName: "IAMPassRolePermissions"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: Allow
                  Action:
                    - iam:PassRole
                    - xray:PutTraceSegments
                  Resource: "*"
          -
            PolicyName: "LambdaPermissions"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - lambda:InvokeFunction
                    - secretsmanager:GetSecretValue
                    - ses:SendEmail
                    - iam:ListUsers
                    - iam:ListAccessKeys
                    - iam:ListUserTags
                  Resource:
                    - "*"
                -
                  Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "*"
  AccessKeysRotationRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule created from CloudFormation to trigger AccessKeysRotationLambda1Key
      ScheduleExpression: "rate(1 day)"
      State: "ENABLED"
      RoleArn: !GetAtt
        - "AccessKeysRotationRole"
        - "Arn"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "AccessKeysRotationLambda1Key"
              - "Arn"
          Id: AccessKeysRotationLambda1Key_Target
  AccessKeysRotationRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AccessKeysRotationLambda1Key
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AccessKeysRotationLambda1Key.Arn
  AccessKeysRotationLambda1Key:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "AccessKeysRotation_1key"
      Handler: index.lambda_handler
      Role: !GetAtt AccessKeysRotationRole.Arn
      Runtime: python3.7
      TracingConfig:
        Mode: Active
      Timeout: 60
      Layers:
        - Fn::ImportValue: LambdaLayer-Boto3Layer
      Code:
        ZipFile: !Sub |
          import boto3,datetime,time,sys
          iam = boto3.client("iam")
          ses = boto3.client('ses')
          SENDER = 'devops@yieldmo.com'
          SUBJECT = 'AWS IAM Access Key rotation (Access Key is too old.)'
          CHARSET = "UTF-8"
          def send_email(RCPT, CHARSET, BODY_HTML, SUBJECT, SENDER ):
              response = ses.send_email(Destination={'ToAddresses': [RCPT,],}, Message={'Body': {'Html': {'Charset': CHARSET,'Data': BODY_HTML,},},'Subject': {'Charset': CHARSET,'Data': SUBJECT,},},Source=SENDER)
              return(response)
          def list_access_keys(usr):
              rsp = iam.list_access_keys(UserName=usr)
              return(rsp)
          def list_users():
              rsp = iam.list_users()
              return(rsp)
          def lambda_handler(event,context):
              print(event)
              for user in [ user['UserName'] for user in iam.list_users()['Users'] ]:
                  try:
                      active = list_access_keys(user)['AccessKeyMetadata'][0]['Status']
                      print(active)
                      if active == 'Active':
                          aKdata = iam.list_access_keys(UserName=user)
                          uTagData = iam.list_user_tags(UserName=user)['Tags']
                          actDayLst = []
                          for accKeydata in  aKdata['AccessKeyMetadata']:
                              aKName = accKeydata['AccessKeyId']
                              aKdate = accKeydata['CreateDate']
                              aKdate = aKdate.strftime("%Y-%m-%d %H:%M:%S")
                              curDate = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())
                              aKd = time.mktime(datetime.datetime.strptime(aKdate, "%Y-%m-%d %H:%M:%S").timetuple())
                              curD = time.mktime(datetime.datetime.strptime(curDate, "%Y-%m-%d %H:%M:%S").timetuple())
                              actDay = (curD - aKd)/60/60/24 
                              actDayLst.append(aKName)
                              actDayLst.append(actDay)
                              BODY_HTML = """<html>
                              <head></head>
                              <body>
                                <h1>Your account Access Key is too old (<DAYS> days old)</h1>
                                <p> Please create a new Access Key using the AWS CLI as follows: </p>
                                <p><code><span style="padding-left:4em">$aws iam create-access-key --user-name <USERNAME></span></code></p>
                                <p> Use the following command to configure your laptop with the new Access Key: </p>
                                <p><code><span style="padding-left:4em">$aws configure</span></code></p>
                                <p> To delete the old Access Key use the following command:</p>
                                <p><code><span style="padding-left:4em">$aws iam delete-access-key --access-key-id <ACCESSKEY_ID> --user-name <USERNAME></span></code></p>
                              </body>
                              </html>
                                          """
                          if actDay >= 90:
                              if len(uTagData) > 0:
                                  for tag in uTagData:
                                      if 'OwnerEmailAddress' in tag['Key']:
                                          RCPT = tag['Value']
                                          if len(actDayLst) == 2:
                                              print(f"User {user} access keys are too old, sending email...")
                                              aK1Name = actDayLst[0]
                                              aK1ds = round(int(actDayLst[1]))
                                              bdyHtml = BODY_HTML.replace("<DAYS>",str(aK1ds)).replace("<USERNAME>",user).replace("<ACCESSKEY_ID>",aK1Name)
                                              send_email(RCPT, CHARSET, bdyHtml, SUBJECT, SENDER)
                                      else:
                                          sys.exit("User does not have the OwnerEmailAddress tag")    
                      else:
                          print(f'{user} keys is inactive, ignoring...')
                          pass
                  except IndexError:
                      print(f'{user} has no key')
  AccessKeysRotationLambda2Keys:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "AccessKeysRotation_2keys"
      Handler: index.lambda_handler
      Role: !GetAtt AccessKeysRotationRole.Arn
      Runtime: python3.7
      TracingConfig:
        Mode: Active
      Timeout: 60
      Layers:
        - Fn::ImportValue: LambdaLayer-Boto3Layer
      Code:
        ZipFile: !Sub |
          import boto3,datetime,time
          iam = boto3.client("iam")
          ses = boto3.client('ses')
          SENDER = 'devops@yieldmo.com'
          SUBJECT = 'Multiple IAM user Access Keys found! Need only 1'
          CHARSET = "UTF-8"
          def send_email(RCPT, CHARSET, BODY_HTML, SUBJECT, SENDER ):
              response = ses.send_email(Destination={'ToAddresses': [RCPT,],}, Message={'Body': {'Html': {'Charset': CHARSET,'Data': BODY_HTML,},},'Subject': {'Charset': CHARSET,'Data': SUBJECT,},},Source=SENDER)
              return(response)
          def lambda_handler(event,context):
              users_list = iam.list_users()['Users']
              for user in users_list:
                  uName = user['UserName']
                  aKdata = iam.list_access_keys(UserName = uName)
                  uTagData = iam.list_user_tags(UserName=uName)['Tags']
                  actKeyLst = []
                  for accKeydata in  aKdata['AccessKeyMetadata']:
                      aKName = accKeydata['AccessKeyId']
                      actKeyLst.append(aKName)
                      BODY_HTML = """<html>
                      <head></head>
                      <body>
                        <h1>Your IAM username '<USERNAME>'  have 2 IAM Access Keys:</h1>
                        <p><code> 1) <ACCESSKEY_ID1></code></p>
                        <p><code> 2) <ACCESSKEY_ID2></code></p>
                        <p> One of those keys must be deleted.</p>
                        <p> To confirm what key is in use, run: </p>
                        <p><code><span style="padding-left:4em">$cat ~/.aws/credentials</span></code><p>
                        <p> Delete the key that is <b>NOT</b> in use with one of the commands below:</p>
                        <p><code><span style="padding-left:4em">$aws iam delete-access-key --access-key-id <ACCESSKEY_ID1> --user-name <USERNAME></span></code></p>
                        <p><code><span style="padding-left:4em">$aws iam delete-access-key --access-key-id <ACCESSKEY_ID2> --user-name <USERNAME></span></code></p>
                      </body>
                      </html>
                                  """
                      if len(uTagData) > 0:
                          for tag in uTagData:
                              if 'OwnerEmailAddress' in tag['Key']:
                                  RCPT = tag['Value']
                                  if len(actKeyLst) == 2:
                                      print(f"User '{uName}' has 2 access keys, sending email...")
                                      aK1Name = actKeyLst[0]
                                      aK2Name = actKeyLst[1]
                                      bdyHtml = BODY_HTML.replace("<USERNAME>",uName).replace("<ACCESSKEY_ID1>",aK1Name).replace("<ACCESSKEY_ID2>",aK2Name)
                                      send_email(RCPT, CHARSET, bdyHtml, SUBJECT, SENDER)
  AccessKeysRotationLambda1KeyLogging:
    DependsOn: AccessKeysRotationLambda1Key
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AccessKeysRotationLambda1Key}'
      RetentionInDays: 7
  AccessKeysRotationErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join ["", [!Ref AccessKeysRotationLambda1Key, "-", "Errors" ]]
      AlarmDescription: "AccessKeysRotation Lambda Errors Alarm"
      AlarmActions:
        - !ImportValue Opsgenie-Infrastructure
      OKActions:
        - !ImportValue Opsgenie-Infrastructure
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
      - Name: "FunctionName"
        Value: !Ref AccessKeysRotationLambda1Key
      Statistic: "Sum"
      ComparisonOperator: "GreaterThanThreshold"
      Threshold: 0
      EvaluationPeriods: 1
      Period: 86400
      TreatMissingData: "missing"
  AccessKeysRotationInvocationsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join ["", [!Ref AccessKeysRotationLambda1Key, "-", "Invocations" ]]
      AlarmDescription: "AccessKeysRotation Lambda Invocations Alarm"
      AlarmActions:
        - !ImportValue Opsgenie-Infrastructure
      OKActions:
        - !ImportValue Opsgenie-Infrastructure
      Namespace: "AWS/Lambda"
      MetricName: "Invocations"
      Dimensions:
      - Name: "FunctionName"
        Value: !Ref AccessKeysRotationLambda1Key
      Statistic: "Sum"
      ComparisonOperator: "LessThanThreshold"
      Threshold: 1
      EvaluationPeriods: 1
      Period: 86400
      TreatMissingData: "missing"
